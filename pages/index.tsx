import type { GetServerSideProps } from 'next'
import Head from 'next/head'
import { Movie, Result } from '../interface/Products'
import axios from 'axios'
import requests from '../utils/requests'
import Banner from '../components/Banner'
import { useEffect, useState } from 'react'
import Loading from '../components/Loading'
import MovieList from '../components/MovieList'
import Lottie from 'lottie-react'
import IntroLogo from '../public/296-react-logo.json'
import { motion } from 'framer-motion'
import Footer from '../components/Footer'

type Category = {
  category: string
  title: string
  movies: Movie[]
}

const Home = ({ trendingNow, originals, topRated, actionMovies, comedy, horror, romance, documentaries }: Result) => {
  const [bannerMovie ,setBannerMovie] = useState<Movie>();
  const [categoryMovie, setCategoryMovie] = useState<Category>();
  const [animateStart, setAnimateStart] = useState(true)

  const introductionAnimation = () => {
    setTimeout(() => {
      setAnimateStart(false)
    }, 4300)
  }

  useEffect(() => {
    const index = Math.floor(Math.random() * trendingNow.length - 1)
    setBannerMovie(trendingNow[index])
    setCategoryMovie({
      category: "trending", 
      title: "Trending Now", 
      movies: trendingNow
    })
    introductionAnimation()
  },[])

  const handleSelectMovie = (categoryID: number) => {

    return categoryID === 1 
    ? setCategoryMovie({ category: "originals", title: "Originals", movies: originals })
    : categoryID === 2 ? setCategoryMovie({ category: "top", title: "Top Rated", movies: topRated })
    : categoryID === 3 ? setCategoryMovie({ category: "action", title: "Action Movies", movies: actionMovies })
    : categoryID === 4 ? setCategoryMovie({ category: "comedy", title: "Comedy", movies: comedy })
    : categoryID === 5 ? setCategoryMovie({ category: "horror", title: "Horror", movies: horror })
    : categoryID === 6 ? setCategoryMovie({ category: "romance", title: "Romance", movies: romance })
    : categoryID === 7 ? setCategoryMovie({ category: "documentaries", title: "Documentaries", movies: documentaries })
    : setCategoryMovie({ category: "trending", title: "Trending Now", movies: trendingNow }) }

  // For introduction Animation w/ Lottie Animation
  if(animateStart){
    return(
      <div className='flex flex-col items-center justify-center relative h-[100vh] overflow-hidden'>
        <Lottie style={{width:"40rem" }} animationData={IntroLogo}/>
        <motion.div
          initial={{ opacity: 0, y:100 }}
          animate={{ opacity: 1, y: 0 }}
          className=" self-start animate-bounce absolute bottom-0 left-4 flex flex-col">
          <h1 className='font-golos text-gray-800 text-xl '>
            WELCOME
          </h1>
          <h1 className='font-roboto text-gray-800 text-4xl'>
            LOADING...
          </h1>
        </motion.div>
      </div>
    )
  }

  return (
    <div className=''>
      <Head>
        <title>Movie Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='flex flex-col'>
        {bannerMovie ? <Banner  movie={bannerMovie}/>: <Loading />}

        {categoryMovie 
          ? <MovieList movies={categoryMovie.movies} title={categoryMovie.title} category={categoryMovie.category} handleSelectMovie={handleSelectMovie} /> 
          : <h1>Loading...</h1> }
      </div>
      <Footer />
    </div>
  )
}

export default Home

export const getServerSideProps: GetServerSideProps = async (context) => {

  const trendingNow = await axios(requests.trending);
  const originals = await axios(requests.originals);
  const topRated = await axios(requests.top);
  const actionMovies = await axios(requests.action);
  const comedy = await axios(requests.comedy);
  const horror = await axios(requests.horror);
  const romance = await axios(requests.romance);
  const documentaries = await axios(requests.documentaries);

  return { 
    props: {
      trendingNow: trendingNow.data.results,
      originals: originals.data.results,
      topRated: topRated.data.results,
      actionMovies: actionMovies.data.results,
      comedy: comedy.data.results,
      horror: horror.data.results,
      romance: romance.data.results,
      documentaries: documentaries.data.results,
    }
  }
}


// Application Key(RapidAPI) : 7f53764bcamsh306fda44cb595ddp1029eajsn69c7a67183a3